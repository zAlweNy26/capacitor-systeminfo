{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["import type { PluginListenerHandle } from '@capacitor/core';\n\n/** Interface for runtime information. */\nexport interface RuntimeInfos {\n  /** The amount of used RAM in bytes. */\n  usedRAM?: number;\n  /** The amount of used HDD in bytes. */\n  usedHDD?: number;\n  /** The amount of used SD card storage in bytes. */\n  usedSD?: number;\n  //usedCPU?: number;\n}\n\n/** Represents software information about a device. */\nexport interface SoftwareInfos {\n  /** The name of the operating system. */\n  osName: string;\n  /** The version of the operating system. */\n  osVersion: string;\n  /** The name of the device brand. */\n  brandName: string;\n  /** The version of the SDK (if applicable). */\n  sdkVersion?: number;\n  /** The name of the SDK (if applicable). */\n  sdkName?: string;\n  /** The security patch level (if applicable). */\n  securityPatch?: string;\n  /** The version of the UI (if applicable). */\n  uiVersion?: string;\n  /** The unique identifier of the device (if applicable). */\n  deviceID?: string;\n  /** The name of the device board (if applicable). */\n  boardName?: string;\n  /** The version of the bootloader (if applicable). */\n  bootloaderVersion?: string;\n  /** The list of supported ABIs (if applicable). */\n  supportedABIs?: string[];\n}\n\n/** Represents the available features that can be queried using the Capacitor System Info plugin. */\nexport type Features =\n  | 'bluetooth'\n  | 'bluetoothLowEnergy'\n  | 'microphone'\n  | 'speaker'\n  | 'nfc'\n  | 'camera'\n  | 'gamepad'\n  | 'gps'\n  | 'touchscreen'\n  | 'wifi'\n  | 'fingerprint'\n  | 'face'\n  | 'ethernet';\n\n/**\n * Represents hardware information of a device.\n */\nexport interface HardwareInfos {\n  /** The model ID of the device. */\n  modelID?: string;\n  /** The code name of the device model. */\n  modelCodeName?: string;\n  /** The model of the CPU. */\n  cpuModel?: string;\n  /** The number of cores and threads of the CPU. */\n  cpuCores?: [number, number][];\n  /** The total size of the SD card in bytes. */\n  totalSD?: number;\n  /** The total size of the HDD in bytes. */\n  totalHDD: number;\n  /** The total size of the RAM in bytes. */\n  totalRAM: number;\n  /** The total number of cores in the CPU. */\n  totalCores: number;\n  /** The manufacturer of the device. */\n  manufacturer: string;\n  /** The features supported by the device. */\n  features: Features[];\n}\n\n/** Represents a collection of system information, including both software and hardware information. */\nexport type SystemInformations = SoftwareInfos & HardwareInfos;\n\n/** Interface for the System Info plugin */\nexport interface SystemInfoPlugin {\n  /**\n   * Returns a Promise that resolves with an object containing system information.\n   * @returns SystemInformations\n   */\n  getInfos(): Promise<SystemInformations>;\n  /**\n   * Starts listening for system information changes.\n   */\n  start(): Promise<void>;\n  /**\n   * Stops listening for system information changes.\n   */\n  stop(): Promise<void>;\n  /**\n   * Adds a listener for the 'runtimeChange' event.\n   * @param eventName - The name of the event to listen for.\n   * @param listenerFunc - The function to call when the event is triggered.\n   * @returns PluginListenerHandle\n   */\n  addListener(eventName: 'runtimeChange', listenerFunc: (event: RuntimeInfos) => void): Promise<PluginListenerHandle>;\n  /**\n   * Removes all event listeners.\n   */\n  removeAllListeners(): Promise<void>;\n}\n"]}